{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Public\\\\Web3\\\\Github\\\\solana-boilerplate\\\\src\\\\Greet.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { VStack, HStack, Button, Input } from '@chakra-ui/react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { FormControl, FormLabel } from '@chakra-ui/react';\nimport * as borsh from 'borsh';\nimport { PublicKey, Transaction, SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst programId = new PublicKey('FGbjtxeYmT5jUP7aNavo9k9mQ3rGQ815WdvwWndR7FF9');\nconst GREETING_SEED = 'hello';\n\nclass GreetingAccount {\n  constructor(fields) {\n    this.counter = 0;\n\n    if (fields) {\n      this.counter = fields.counter;\n    }\n  }\n\n}\n\nconst GreetingSchema = new Map([[GreetingAccount, {\n  kind: 'struct',\n  fields: [['counter', 'u32']]\n}]]);\nconst GREETING_SIZE = borsh.serialize(GreetingSchema, new GreetingAccount()).length;\n\nfunction counterFromAccountInfo(accountInfo) {\n  const data = borsh.deserialize(GreetingSchema, GreetingAccount, accountInfo.data);\n  return data.counter;\n}\n\nexport function Greet() {\n  _s();\n\n  const wallet = useWallet();\n  const {\n    connection\n  } = useConnection();\n  const [counter, setCounter] = useState(null);\n  const greet = useCallback(async publicKey => {\n    const recipient = new PublicKey(publicKey);\n    const greetedPubkey = await PublicKey.createWithSeed(recipient, GREETING_SEED, programId);\n    const greetedAccount = await connection.getAccountInfo(greetedPubkey);\n\n    if (greetedAccount === null) {\n      const lamports = await connection.getMinimumBalanceForRentExemption(GREETING_SIZE);\n      const transaction = new Transaction().add(SystemProgram.createAccountWithSeed({\n        fromPubkey: recipient,\n        basePubkey: recipient,\n        seed: GREETING_SEED,\n        newAccountPubkey: greetedPubkey,\n        lamports,\n        space: GREETING_SIZE,\n        programId\n      }));\n      const signature = await wallet.sendTransaction(transaction, connection);\n      await connection.confirmTransaction(signature, 'processed');\n    }\n\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: greetedPubkey,\n        isSigner: false,\n        isWritable: true\n      }],\n      programId,\n      data: Buffer.alloc(0)\n    });\n    const signature = await wallet.sendTransaction(new Transaction().add(instruction), connection);\n    await connection.confirmTransaction(signature, 'processed');\n  }, [connection, wallet]);\n  const greetYourself = useCallback(async () => {\n    await greet(wallet.publicKey.toBase58());\n  }, [greet, wallet.publicKey]);\n  useEffect(() => {\n    async function addListener() {\n      if (wallet.publicKey) {\n        const greetedPubkey = await PublicKey.createWithSeed(wallet.publicKey, GREETING_SEED, programId);\n        const currentAccountInfo = await connection.getAccountInfo(greetedPubkey, 'confirmed');\n\n        if (currentAccountInfo === null) {\n          setCounter(0);\n        } else {\n          setCounter(counterFromAccountInfo(currentAccountInfo));\n        }\n\n        connection.onAccountChange(greetedPubkey, (accountInfo, _) => {\n          setCounter(counterFromAccountInfo(accountInfo));\n        }, 'confirmed');\n      }\n    }\n\n    addListener();\n  }, [connection, wallet.publicKey]);\n  const [recipient, setRecipient] = useState('');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(VStack, {\n      width: \"full\",\n      spacing: 8,\n      borderRadius: 10,\n      borderWidth: 2,\n      p: 10,\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        id: \"greetings\",\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          children: \"No. of greetings recieved\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          value: counter === null ? 'Loading..' : counter,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HStack, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: greetYourself,\n          children: \"Greet Yourself\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VStack, {\n      width: \"full\",\n      spacing: 8,\n      borderRadius: 10,\n      borderWidth: 2,\n      p: 10,\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        id: \"send\",\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          children: \"Send greeting to public key\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          value: recipient,\n          onChange: e => setRecipient(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          greet(recipient);\n        },\n        children: \"Greet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Greet, \"kkqZz/0SeeCBFETJOvzG06MW4Ok=\", false, function () {\n  return [useWallet, useConnection];\n});\n\n_c = Greet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Greet\");","map":{"version":3,"sources":["C:/Users/Public/Web3/Github/solana-boilerplate/src/Greet.jsx"],"names":["React","useCallback","useEffect","useState","VStack","HStack","Button","Input","useConnection","useWallet","FormControl","FormLabel","borsh","PublicKey","Transaction","SystemProgram","TransactionInstruction","programId","GREETING_SEED","GreetingAccount","constructor","fields","counter","GreetingSchema","Map","kind","GREETING_SIZE","serialize","length","counterFromAccountInfo","accountInfo","data","deserialize","Greet","wallet","connection","setCounter","greet","publicKey","recipient","greetedPubkey","createWithSeed","greetedAccount","getAccountInfo","lamports","getMinimumBalanceForRentExemption","transaction","add","createAccountWithSeed","fromPubkey","basePubkey","seed","newAccountPubkey","space","signature","sendTransaction","confirmTransaction","instruction","keys","pubkey","isSigner","isWritable","Buffer","alloc","greetYourself","toBase58","addListener","currentAccountInfo","onAccountChange","_","setRecipient","e","target","value"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { VStack, HStack, Button, Input } from '@chakra-ui/react';\r\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\r\nimport { FormControl, FormLabel } from '@chakra-ui/react';\r\nimport * as borsh from 'borsh';\r\nimport {\r\n  PublicKey,\r\n  Transaction,\r\n  SystemProgram,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nconst programId = new PublicKey('FGbjtxeYmT5jUP7aNavo9k9mQ3rGQ815WdvwWndR7FF9');\r\nconst GREETING_SEED = 'hello';\r\n\r\nclass GreetingAccount {\r\n  counter = 0;\r\n  constructor(fields) {\r\n    if (fields) {\r\n      this.counter = fields.counter;\r\n    }\r\n  }\r\n}\r\n\r\nconst GreetingSchema = new Map([\r\n  [GreetingAccount, { kind: 'struct', fields: [['counter', 'u32']] }],\r\n]);\r\n\r\nconst GREETING_SIZE = borsh.serialize(\r\n  GreetingSchema,\r\n  new GreetingAccount()\r\n).length;\r\n\r\nfunction counterFromAccountInfo(accountInfo) {\r\n  const data = borsh.deserialize(\r\n    GreetingSchema,\r\n    GreetingAccount,\r\n    accountInfo.data\r\n  );\r\n  return data.counter;\r\n}\r\n\r\nexport function Greet() {\r\n  const wallet = useWallet();\r\n  const { connection } = useConnection();\r\n  const [counter, setCounter] = useState(null);\r\n\r\n  const greet = useCallback(\r\n    async publicKey => {\r\n      const recipient = new PublicKey(publicKey);\r\n      const greetedPubkey = await PublicKey.createWithSeed(\r\n        recipient,\r\n        GREETING_SEED,\r\n        programId\r\n      );\r\n\r\n      const greetedAccount = await connection.getAccountInfo(greetedPubkey);\r\n      if (greetedAccount === null) {\r\n        const lamports = await connection.getMinimumBalanceForRentExemption(\r\n          GREETING_SIZE\r\n        );\r\n\r\n        const transaction = new Transaction().add(\r\n          SystemProgram.createAccountWithSeed({\r\n            fromPubkey: recipient,\r\n            basePubkey: recipient,\r\n            seed: GREETING_SEED,\r\n            newAccountPubkey: greetedPubkey,\r\n            lamports,\r\n            space: GREETING_SIZE,\r\n            programId,\r\n          })\r\n        );\r\n\r\n        const signature = await wallet.sendTransaction(transaction, connection);\r\n        await connection.confirmTransaction(signature, 'processed');\r\n      }\r\n\r\n      const instruction = new TransactionInstruction({\r\n        keys: [{ pubkey: greetedPubkey, isSigner: false, isWritable: true }],\r\n        programId,\r\n        data: Buffer.alloc(0),\r\n      });\r\n\r\n      const signature = await wallet.sendTransaction(\r\n        new Transaction().add(instruction),\r\n        connection\r\n      );\r\n\r\n      await connection.confirmTransaction(signature, 'processed');\r\n    },\r\n    [connection, wallet]\r\n  );\r\n\r\n  const greetYourself = useCallback(async () => {\r\n    await greet(wallet.publicKey.toBase58());\r\n  }, [greet, wallet.publicKey]);\r\n\r\n  useEffect(() => {\r\n    async function addListener() {\r\n      if (wallet.publicKey) {\r\n        const greetedPubkey = await PublicKey.createWithSeed(\r\n          wallet.publicKey,\r\n          GREETING_SEED,\r\n          programId\r\n        );\r\n        const currentAccountInfo = await connection.getAccountInfo(\r\n          greetedPubkey,\r\n          'confirmed'\r\n        );\r\n        if (currentAccountInfo === null) {\r\n          setCounter(0);\r\n        } else {\r\n          setCounter(counterFromAccountInfo(currentAccountInfo));\r\n        }\r\n        connection.onAccountChange(\r\n          greetedPubkey,\r\n          (accountInfo, _) => {\r\n            setCounter(counterFromAccountInfo(accountInfo));\r\n          },\r\n          'confirmed'\r\n        );\r\n      }\r\n    }\r\n    addListener();\r\n  }, [connection, wallet.publicKey]);\r\n\r\n  const [recipient, setRecipient] = useState('');\r\n  return (\r\n    <>\r\n      <VStack width=\"full\" spacing={8} borderRadius={10} borderWidth={2} p={10}>\r\n        <FormControl id=\"greetings\">\r\n          <FormLabel>No. of greetings recieved</FormLabel>\r\n          <Input\r\n            type=\"text\"\r\n            value={counter === null ? 'Loading..' : counter}\r\n            readOnly\r\n          />\r\n        </FormControl>\r\n        <HStack>\r\n          <Button onClick={greetYourself}>Greet Yourself</Button>\r\n        </HStack>\r\n      </VStack>\r\n      <VStack width=\"full\" spacing={8} borderRadius={10} borderWidth={2} p={10}>\r\n        <FormControl id=\"send\">\r\n          <FormLabel>Send greeting to public key</FormLabel>\r\n          <Input\r\n            value={recipient}\r\n            onChange={e => setRecipient(e.target.value)}\r\n          ></Input>\r\n        </FormControl>\r\n        <Button\r\n          onClick={() => {\r\n            greet(recipient);\r\n          }}\r\n        >\r\n          Greet\r\n        </Button>\r\n      </VStack>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}