{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { chakra } from \"@chakra-ui/system\";\nimport { motion } from \"framer-motion\";\nimport { mergeWith } from \"@chakra-ui/utils\";\nimport React from \"react\";\nimport { usePopoverContext } from \"./popover-context\"; // TODO: consider moving this to some util\n\nvar mergeVariants = function mergeVariants(variants) {\n  if (!variants) return;\n  return mergeWith(variants, {\n    enter: {\n      visibility: \"visible\"\n    },\n    exit: {\n      transitionEnd: {\n        visibility: \"hidden\"\n      }\n    }\n  });\n};\nvar scaleFade = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1]\n    }\n  },\n  enter: {\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1]\n    }\n  }\n};\nvar Section = motion(chakra.section);\nexport var PopoverTransition = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _usePopoverContext = usePopoverContext(),\n    isOpen = _usePopoverContext.isOpen;\n  return /*#__PURE__*/React.createElement(Section, _extends({\n    ref: ref,\n    variants: mergeVariants(props.variants)\n  }, props, {\n    initial: false,\n    animate: isOpen ? \"enter\" : \"exit\"\n  }));\n});\nPopoverTransition.defaultProps = {\n  variants: scaleFade\n};","map":null,"metadata":{},"sourceType":"module"}