{"ast":null,"code":"export function isDecimal(value) {\n  return !Number.isInteger(parseFloat(value.toString()));\n}\nfunction replaceWhiteSpace(value, replaceValue) {\n  if (replaceValue === void 0) {\n    replaceValue = \"-\";\n  }\n  return value.replace(/\\s+/g, replaceValue);\n}\nfunction escape(value) {\n  var valueStr = replaceWhiteSpace(value.toString());\n  if (valueStr.includes(\"\\\\.\")) return value;\n  return isDecimal(value) ? valueStr.replace(\".\", \"\\\\.\") : value;\n}\nexport function addPrefix(value, prefix) {\n  if (prefix === void 0) {\n    prefix = \"\";\n  }\n  return [prefix, escape(value)].filter(Boolean).join(\"-\");\n}\nexport function toVarRef(name, fallback) {\n  return \"var(\" + escape(name) + (fallback ? \", \" + fallback : \"\") + \")\";\n}\nexport function toVar(value, prefix) {\n  if (prefix === void 0) {\n    prefix = \"\";\n  }\n  return \"--\" + addPrefix(value, prefix);\n}\nexport function cssVar(name, options) {\n  var cssVariable = toVar(name, options == null ? void 0 : options.prefix);\n  return {\n    variable: cssVariable,\n    reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))\n  };\n}\nfunction getFallback(fallback) {\n  if (typeof fallback === \"string\") return fallback;\n  return fallback == null ? void 0 : fallback.reference;\n}","map":null,"metadata":{},"sourceType":"module"}