{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Public\\\\Web3\\\\Github\\\\SolPets\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { WalletNotConnectedError, WalletNotReadyError } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { WalletNotSelectedError } from './errors';\nimport { useLocalStorage } from './useLocalStorage';\nimport { WalletContext } from './useWallet';\nvar initialState = {\n  wallet: null,\n  adapter: null,\n  ready: false,\n  publicKey: null,\n  connected: false\n};\nexport var WalletProvider = function WalletProvider(_ref) {\n  var children = _ref.children,\n    wallets = _ref.wallets,\n    _ref$autoConnect = _ref.autoConnect,\n    autoConnect = _ref$autoConnect === void 0 ? false : _ref$autoConnect,\n    _ref$onError = _ref.onError,\n    onError = _ref$onError === void 0 ? function (error) {\n      return console.error(error);\n    } : _ref$onError,\n    _ref$localStorageKey = _ref.localStorageKey,\n    localStorageKey = _ref$localStorageKey === void 0 ? 'walletName' : _ref$localStorageKey;\n  var _useLocalStorage = useLocalStorage(localStorageKey, null),\n    _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n    name = _useLocalStorage2[0],\n    setName = _useLocalStorage2[1];\n  var _useState = useState(initialState),\n    _useState2 = _slicedToArray(_useState, 2),\n    _useState2$ = _useState2[0],\n    wallet = _useState2$.wallet,\n    adapter = _useState2$.adapter,\n    ready = _useState2$.ready,\n    publicKey = _useState2$.publicKey,\n    connected = _useState2$.connected,\n    setState = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    connecting = _useState4[0],\n    setConnecting = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    disconnecting = _useState6[0],\n    setDisconnecting = _useState6[1];\n  var working = useRef(false);\n  // Map of wallet names to wallets\n  var walletsByName = useMemo(function () {\n    return wallets.reduce(function (walletsByName, wallet) {\n      walletsByName[wallet.name] = wallet;\n      return walletsByName;\n    }, {});\n  }, [wallets]);\n  // When the selected wallet changes, initialize the state\n  useEffect(function () {\n    var wallet = name && walletsByName[name] || null;\n    var adapter = wallet && wallet.adapter();\n    if (adapter) {\n      var _ready = adapter.ready,\n        _publicKey = adapter.publicKey,\n        _connected = adapter.connected;\n      setState({\n        wallet: wallet,\n        adapter: adapter,\n        connected: _connected,\n        publicKey: _publicKey,\n        ready: _ready\n      });\n    } else {\n      setState(initialState);\n    }\n  }, [name, walletsByName, setState]);\n  // If autoConnect is enabled, try to connect when the adapter changes and is ready\n  useEffect(function () {\n    if (working.current || connecting || connected || !autoConnect || !adapter || !ready) return;\n    (function () {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              working.current = true;\n              setConnecting(true);\n              _context.prev = 2;\n              _context.next = 5;\n              return adapter.connect();\n            case 5:\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](2);\n              // Clear the selected wallet\n              setName(null);\n              // Don't throw error, but onError will still be called\n            case 10:\n              _context.prev = 10;\n              setConnecting(false);\n              working.current = false;\n              return _context.finish(10);\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[2, 7, 10, 14]]);\n      }));\n    })();\n  }, [working, connecting, connected, autoConnect, adapter, ready, setConnecting, setName]);\n  // Select a wallet by name\n  var select = useCallback(function (newName) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(name === newName)) {\n              _context2.next = 2;\n              break;\n            }\n            return _context2.abrupt(\"return\");\n          case 2:\n            if (!adapter) {\n              _context2.next = 5;\n              break;\n            }\n            _context2.next = 5;\n            return adapter.disconnect();\n          case 5:\n            setName(newName);\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n  }, [name, adapter, setName]);\n  // Handle the adapter's ready event\n  var onReady = useCallback(function () {\n    return setState(function (state) {\n      return Object.assign(Object.assign({}, state), {\n        ready: true\n      });\n    });\n  }, [setState]);\n  // Handle the adapter's connect event\n  var onConnect = useCallback(function () {\n    if (!adapter) return;\n    var connected = adapter.connected,\n      publicKey = adapter.publicKey,\n      ready = adapter.ready;\n    setState(function (state) {\n      return Object.assign(Object.assign({}, state), {\n        connected: connected,\n        publicKey: publicKey,\n        ready: ready\n      });\n    });\n  }, [adapter, setState]);\n  // Handle the adapter's disconnect event\n  var onDisconnect = useCallback(function () {\n    return setName(null);\n  }, [setName]);\n  // Connect the adapter to the wallet\n  var connect = useCallback(function () {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var error, _error;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(working.current || connecting || disconnecting || connected)) {\n              _context3.next = 2;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 2:\n            if (!(!wallet || !adapter)) {\n              _context3.next = 6;\n              break;\n            }\n            error = new WalletNotSelectedError();\n            onError(error);\n            throw error;\n          case 6:\n            if (ready) {\n              _context3.next = 12;\n              break;\n            }\n            setName(null);\n            if (typeof window !== 'undefined') {\n              window.open(wallet.url, '_blank');\n            }\n            _error = new WalletNotReadyError();\n            onError(_error);\n            throw _error;\n          case 12:\n            working.current = true;\n            setConnecting(true);\n            _context3.prev = 14;\n            _context3.next = 17;\n            return adapter.connect();\n          case 17:\n            _context3.next = 23;\n            break;\n          case 19:\n            _context3.prev = 19;\n            _context3.t0 = _context3[\"catch\"](14);\n            setName(null);\n            throw _context3.t0;\n          case 23:\n            _context3.prev = 23;\n            setConnecting(false);\n            working.current = false;\n            return _context3.finish(23);\n          case 27:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[14, 19, 23, 27]]);\n    }));\n  }, [working, connecting, disconnecting, connected, wallet, adapter, onError, ready, setConnecting, setName]);\n  // Disconnect the adapter from the wallet\n  var disconnect = useCallback(function () {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!(working.current || disconnecting)) {\n              _context4.next = 2;\n              break;\n            }\n            return _context4.abrupt(\"return\");\n          case 2:\n            if (adapter) {\n              _context4.next = 4;\n              break;\n            }\n            return _context4.abrupt(\"return\", setName(null));\n          case 4:\n            working.current = true;\n            setDisconnecting(true);\n            _context4.prev = 6;\n            _context4.next = 9;\n            return adapter.disconnect();\n          case 9:\n            _context4.prev = 9;\n            setName(null);\n            setDisconnecting(false);\n            working.current = false;\n            return _context4.finish(9);\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[6,, 9, 14]]);\n    }));\n  }, [working, disconnecting, adapter, setDisconnecting, setName]);\n  // Send a transaction using the provided connection\n  var sendTransaction = useCallback(function (transaction, connection, options) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var error, _error2;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            if (adapter) {\n              _context5.next = 4;\n              break;\n            }\n            error = new WalletNotSelectedError();\n            onError(error);\n            throw error;\n          case 4:\n            if (connected) {\n              _context5.next = 8;\n              break;\n            }\n            _error2 = new WalletNotConnectedError();\n            onError(_error2);\n            throw _error2;\n          case 8:\n            _context5.next = 10;\n            return adapter.sendTransaction(transaction, connection, options);\n          case 10:\n            return _context5.abrupt(\"return\", _context5.sent);\n          case 11:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n  }, [adapter, onError, connected]);\n  // Sign a transaction if the wallet supports it\n  var signTransaction = useMemo(function () {\n    return adapter && 'signTransaction' in adapter ? function (transaction) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var error;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (connected) {\n                _context6.next = 4;\n                break;\n              }\n              error = new WalletNotConnectedError();\n              onError(error);\n              throw error;\n            case 4:\n              _context6.next = 6;\n              return adapter.signTransaction(transaction);\n            case 6:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }));\n    } : undefined;\n  }, [adapter, onError, connected]);\n  // Sign multiple transactions if the wallet supports it\n  var signAllTransactions = useMemo(function () {\n    return adapter && 'signAllTransactions' in adapter ? function (transactions) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var error;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (connected) {\n                _context7.next = 4;\n                break;\n              }\n              error = new WalletNotConnectedError();\n              onError(error);\n              throw error;\n            case 4:\n              _context7.next = 6;\n              return adapter.signAllTransactions(transactions);\n            case 6:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 7:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7);\n      }));\n    } : undefined;\n  }, [adapter, onError, connected]);\n  // Sign an arbitrary message if the wallet supports it\n  var signMessage = useMemo(function () {\n    return adapter && 'signMessage' in adapter ? function (message) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var error;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (connected) {\n                _context8.next = 4;\n                break;\n              }\n              error = new WalletNotConnectedError();\n              onError(error);\n              throw error;\n            case 4:\n              _context8.next = 6;\n              return adapter.signMessage(message);\n            case 6:\n              return _context8.abrupt(\"return\", _context8.sent);\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8);\n      }));\n    } : undefined;\n  }, [adapter, onError, connected]);\n  // Setup and teardown event listeners when the adapter changes\n  useEffect(function () {\n    if (adapter) {\n      adapter.on('ready', onReady);\n      adapter.on('connect', onConnect);\n      adapter.on('disconnect', onDisconnect);\n      adapter.on('error', onError);\n      return function () {\n        adapter.off('ready', onReady);\n        adapter.off('connect', onConnect);\n        adapter.off('disconnect', onDisconnect);\n        adapter.off('error', onError);\n      };\n    }\n  }, [adapter, onReady, onConnect, onDisconnect, onError]);\n  return React.createElement(WalletContext.Provider, {\n    value: {\n      wallets: wallets,\n      autoConnect: autoConnect,\n      wallet: wallet,\n      adapter: adapter,\n      publicKey: publicKey,\n      ready: ready,\n      connected: connected,\n      connecting: connecting,\n      disconnecting: disconnecting,\n      select: select,\n      connect: connect,\n      disconnect: disconnect,\n      sendTransaction: sendTransaction,\n      signTransaction: signTransaction,\n      signAllTransactions: signAllTransactions,\n      signMessage: signMessage\n    }\n  }, children);\n};","map":null,"metadata":{},"sourceType":"module"}