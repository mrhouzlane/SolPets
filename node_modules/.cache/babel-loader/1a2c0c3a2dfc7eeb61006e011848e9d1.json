{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Public\\\\Web3\\\\Github\\\\SolPets\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles, useTheme } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { useSlider } from \"./use-slider\";\nvar _createContext = createContext({\n    name: \"SliderContext\",\n    errorMessage: \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <Slider />\"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  SliderProvider = _createContext2[0],\n  useSliderContext = _createContext2[1];\nexport { SliderProvider, useSliderContext };\n\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\nexport var Slider = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Slider\", props);\n  var ownProps = omitThemingProps(props);\n  var _useTheme = useTheme(),\n    direction = _useTheme.direction;\n  ownProps.direction = direction;\n  var _useSlider = useSlider(ownProps),\n    getInputProps = _useSlider.getInputProps,\n    getRootProps = _useSlider.getRootProps,\n    context = _objectWithoutPropertiesLoose(_useSlider, [\"getInputProps\", \"getRootProps\"]);\n  var rootProps = getRootProps();\n  var inputProps = getInputProps({}, ref);\n  var rootStyles = _extends({\n    display: \"inline-block\",\n    position: \"relative\",\n    cursor: \"pointer\"\n  }, styles.container);\n  return /*#__PURE__*/React.createElement(SliderProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, rootProps, {\n    className: \"chakra-slider\",\n    __css: rootStyles\n  }), props.children, /*#__PURE__*/React.createElement(\"input\", inputProps))));\n});\nSlider.defaultProps = {\n  orientation: \"horizontal\"\n};\nif (__DEV__) {\n  Slider.displayName = \"Slider\";\n}\n\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\nexport var SliderThumb = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useSliderContext = useSliderContext(),\n    getThumbProps = _useSliderContext.getThumbProps;\n  var styles = useStyles();\n  var thumbStyles = _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    outline: 0\n  }, styles.thumb);\n  var thumbProps = getThumbProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, thumbProps, {\n    className: cx(\"chakra-slider__thumb\", props.className),\n    __css: thumbStyles\n  }));\n});\nif (__DEV__) {\n  SliderThumb.displayName = \"SliderThumb\";\n}\nexport var SliderTrack = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useSliderContext2 = useSliderContext(),\n    getTrackProps = _useSliderContext2.getTrackProps;\n  var styles = useStyles();\n  var trackStyles = _extends({\n    overflow: \"hidden\"\n  }, styles.track);\n  var trackProps = getTrackProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, trackProps, {\n    className: cx(\"chakra-slider__track\", props.className),\n    __css: trackStyles\n  }));\n});\nif (__DEV__) {\n  SliderTrack.displayName = \"SliderTrack\";\n}\nexport var SliderFilledTrack = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useSliderContext3 = useSliderContext(),\n    getInnerTrackProps = _useSliderContext3.getInnerTrackProps;\n  var styles = useStyles();\n  var trackStyles = _extends({\n    width: \"inherit\",\n    height: \"inherit\"\n  }, styles.filledTrack);\n  var trackProps = getInnerTrackProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, trackProps, {\n    className: \"chakra-slider__filled-track\",\n    __css: trackStyles\n  }));\n});\nif (__DEV__) {\n  SliderFilledTrack.displayName = \"SliderFilledTrack\";\n}\n\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/slider\n */\nexport var SliderMark = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useSliderContext4 = useSliderContext(),\n    getMarkerProps = _useSliderContext4.getMarkerProps;\n  var markProps = getMarkerProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, markProps, {\n    className: cx(\"chakra-slider__marker\", props.className)\n  }));\n});\nif (__DEV__) {\n  SliderMark.displayName = \"SliderMark\";\n}","map":null,"metadata":{},"sourceType":"module"}