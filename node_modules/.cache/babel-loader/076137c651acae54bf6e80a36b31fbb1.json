{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Public\\\\Web3\\\\Github\\\\SolPets\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useEnvironment } from \"@chakra-ui/react-env\";\nimport { isBrowser } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nexport function useMediaQuery(query) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var isSupported = isBrowser && \"matchMedia\" in env.window;\n  var _React$useState = React.useState(queries.map(function (query) {\n      return isSupported ? !!env.window.matchMedia(query).matches : false;\n    })),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    matches = _React$useState2[0],\n    setMatches = _React$useState2[1];\n  useSafeLayoutEffect(function () {\n    if (!isSupported) return undefined;\n    var mediaQueryList = queries.map(function (query) {\n      return env.window.matchMedia(query);\n    });\n    var listenerList = mediaQueryList.map(function (mediaQuery, index) {\n      var listener = function listener() {\n        return setMatches(function (prev) {\n          return prev.map(function (prevValue, idx) {\n            return index === idx ? !!mediaQuery.matches : prevValue;\n          });\n        });\n      };\n      mediaQuery.addListener(listener);\n      return listener;\n    });\n    return function () {\n      mediaQueryList.forEach(function (mediaQuery, index) {\n        mediaQuery.removeListener(listenerList[index]);\n      });\n    };\n  }, [query]);\n  return matches;\n}","map":null,"metadata":{},"sourceType":"module"}