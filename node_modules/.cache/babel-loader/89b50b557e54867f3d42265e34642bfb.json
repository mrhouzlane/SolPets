{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Public\\\\Web3\\\\Github\\\\SolPets\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { createContext, mergeRefs } from \"@chakra-ui/react-utils\";\nimport { useRef, useState } from \"react\";\nimport { DescendantsManager } from \"./descendant\";\nimport { useSafeLayoutEffect, cast } from \"./utils\";\n/**\n * @internal\n * React hook that initializes the DescendantsManager\n */\n\nfunction useDescendants() {\n  var _useState = useState(function () {\n      return new DescendantsManager();\n    }),\n    _useState2 = _slicedToArray(_useState, 1),\n    descendants = _useState2[0];\n  useSafeLayoutEffect(function () {\n    return function () {\n      return descendants.destroy();\n    };\n  });\n  return descendants;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Descendants context to be used in component-land.\n  - Mount the `DescendantsContextProvider` at the root of the component\n  - Call `useDescendantsContext` anywhere you need access to the descendants information\n\n  NB:  I recommend using `createDescendantContext` below\n * -----------------------------------------------------------------------------------------------*/\nvar _createContext = createContext({\n    name: \"DescendantsProvider\",\n    errorMessage: \"useDescendantsContext must be used within DescendantsProvider\"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  DescendantsContextProvider = _createContext2[0],\n  useDescendantsContext = _createContext2[1];\n/**\n * @internal\n * This hook provides information a descendant such as:\n * - Its index compared to other descendants\n * - ref callback to register the descendant\n * - Its enabled index compared to other enabled descendants\n */\nfunction useDescendant(options) {\n  var descendants = useDescendantsContext();\n  var _useState3 = useState(-1),\n    _useState4 = _slicedToArray(_useState3, 2),\n    index = _useState4[0],\n    setIndex = _useState4[1];\n  var ref = useRef(null);\n  useSafeLayoutEffect(function () {\n    return function () {\n      if (!ref.current) return;\n      descendants.unregister(ref.current);\n    };\n  }, []);\n  useSafeLayoutEffect(function () {\n    if (!ref.current) return;\n    var dataIndex = Number(ref.current.dataset.index);\n    if (index != dataIndex && !Number.isNaN(dataIndex)) {\n      setIndex(dataIndex);\n    }\n  });\n  var refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);\n  return {\n    descendants: descendants,\n    index: index,\n    enabledIndex: descendants.enabledIndexOf(ref.current),\n    register: mergeRefs(refCallback, ref)\n  };\n}\n/* -------------------------------------------------------------------------------------------------\n * Function that provides strongly typed versions of the context provider and hooks above.\n   To be used in component-land\n * -----------------------------------------------------------------------------------------------*/\n\nexport function createDescendantContext() {\n  var ContextProvider = cast(DescendantsContextProvider);\n  var _useDescendantsContext = function _useDescendantsContext() {\n    return cast(useDescendantsContext());\n  };\n  var _useDescendant = function _useDescendant(options) {\n    return useDescendant(options);\n  };\n  var _useDescendants = function _useDescendants() {\n    return useDescendants();\n  };\n  return [\n  // context provider\n  ContextProvider,\n  // call this when you need to read from context\n  _useDescendantsContext,\n  // descendants state information, to be called and passed to `ContextProvider`\n  _useDescendants,\n  // descendant index information\n  _useDescendant];\n}","map":null,"metadata":{},"sourceType":"module"}