{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Public\\\\Web3\\\\Github\\\\solana-boilerplate\\\\src\\\\components\\\\LoginForm.js\";\nimport React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport { FormControl, FormLabel, SimpleGrid, VStack, Input, FormHelperText, Box, Heading, Text, Stack, HStack, RadioGroup, Radio, NumberInput, NumberInputField, Button, Flex, Link, ButtonGroup, IconButton, AddIcon, useDisclosure, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, Lorem, ModalFooter } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FormikExample() {\n  function validateName(value) {\n    let error;\n\n    if (!value) {\n      error = \"Name is required\";\n    } else if (value.toLowerCase() !== \"naruto\") {\n      error = \"Jeez! You're not a fan ðŸ˜±\";\n    }\n\n    return error;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      name: \"Sasuke\"\n    },\n    onSubmit: (values, actions) => {\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n        actions.setSubmitting(false);\n      }, 1000);\n    },\n    children: props => /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"name\",\n        validate: validateName,\n        children: ({\n          field,\n          form\n        }) => /*#__PURE__*/_jsxDEV(FormControl, {\n          isInvalid: form.errors.name && form.touched.name,\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            htmlFor: \"name\",\n            children: \"First name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Input, { ...field,\n            id: \"name\",\n            placeholder: \"name\",\n            borderRadius: \"16px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n            children: form.errors.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        mt: 4,\n        colorScheme: \"brand\",\n        isLoading: props.isSubmitting,\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 7\n  }, this);\n}\n\n_c = FormikExample;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormikExample\");","map":{"version":3,"sources":["C:/Users/Public/Web3/Github/solana-boilerplate/src/components/LoginForm.js"],"names":["React","useCallback","useEffect","useState","useMemo","FormControl","FormLabel","SimpleGrid","VStack","Input","FormHelperText","Box","Heading","Text","Stack","HStack","RadioGroup","Radio","NumberInput","NumberInputField","Button","Flex","Link","ButtonGroup","IconButton","AddIcon","useDisclosure","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","Lorem","ModalFooter","FormikExample","validateName","value","error","toLowerCase","name","values","actions","setTimeout","alert","JSON","stringify","setSubmitting","props","field","form","errors","touched","isSubmitting"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,EAAkDC,OAAlD,QAAiE,OAAjE;AACA,SACIC,WADJ,EAEIC,SAFJ,EAGIC,UAHJ,EAIIC,MAJJ,EAKIC,KALJ,EAMIC,cANJ,EAOIC,GAPJ,EAQIC,OARJ,EASIC,IATJ,EAUIC,KAVJ,EAWIC,MAXJ,EAYIC,UAZJ,EAaIC,KAbJ,EAcIC,WAdJ,EAeIC,gBAfJ,EAgBIC,MAhBJ,EAiBIC,IAjBJ,EAkBIC,IAlBJ,EAmBIC,WAnBJ,EAoBIC,UApBJ,EAqBIC,OArBJ,EAsBIC,aAtBJ,EAuBIC,KAvBJ,EAwBIC,YAxBJ,EAyBIC,YAzBJ,EA0BIC,WA1BJ,EA2BIC,gBA3BJ,EA4BIC,SA5BJ,EA6BIC,KA7BJ,EA8BIC,WA9BJ,QA+BO,kBA/BP;;;AAsCA,SAASC,aAAT,GAAyB;AACrB,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAIC,KAAJ;;AACA,QAAI,CAACD,KAAL,EAAY;AACVC,MAAAA,KAAK,GAAG,kBAAR;AACD,KAFD,MAEO,IAAID,KAAK,CAACE,WAAN,OAAwB,QAA5B,EAAsC;AAC3CD,MAAAA,KAAK,GAAG,2BAAR;AACD;;AACD,WAAOA,KAAP;AACD;;AACD,sBACE,QAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEE,MAAAA,IAAI,EAAE;AAAR,KADjB;AAEE,IAAA,QAAQ,EAAE,CAACC,MAAD,EAASC,OAAT,KAAqB;AAC7BC,MAAAA,UAAU,CAAC,MAAM;AACfC,QAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeL,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAC,QAAAA,OAAO,CAACK,aAAR,CAAsB,KAAtB;AACD,OAHS,EAGP,IAHO,CAAV;AAID,KAPH;AAAA,cASIC,KAAD,iBACC,QAAC,IAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAEZ,YAA7B;AAAA,kBACG,CAAC;AAAEa,UAAAA,KAAF;AAASC,UAAAA;AAAT,SAAD,kBACC,QAAC,WAAD;AAAa,UAAA,SAAS,EAAEA,IAAI,CAACC,MAAL,CAAYX,IAAZ,IAAoBU,IAAI,CAACE,OAAL,CAAaZ,IAAzD;AAAA,kCACE,QAAC,SAAD;AAAW,YAAA,OAAO,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,KAAD,OACMS,KADN;AAEE,YAAA,EAAE,EAAC,MAFL;AAGE,YAAA,WAAW,EAAC,MAHd;AAIE,YAAA,YAAY,EAAC;AAJf;AAAA;AAAA;AAAA;AAAA,kBAFF,eAQE,QAAC,gBAAD;AAAA,sBAAmBC,IAAI,CAACC,MAAL,CAAYX;AAA/B;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cADF,eAeE,QAAC,MAAD;AACE,QAAA,EAAE,EAAE,CADN;AAEE,QAAA,WAAW,EAAC,OAFd;AAGE,QAAA,SAAS,EAAEQ,KAAK,CAACK,YAHnB;AAIE,QAAA,IAAI,EAAC,QAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD;;KAhDMlB,a","sourcesContent":["import React, { useCallback, useEffect, useState, useMemo } from 'react';\r\nimport {\r\n    FormControl,\r\n    FormLabel,\r\n    SimpleGrid,\r\n    VStack,\r\n    Input,\r\n    FormHelperText,\r\n    Box,\r\n    Heading,\r\n    Text,\r\n    Stack,\r\n    HStack,\r\n    RadioGroup,\r\n    Radio,\r\n    NumberInput,\r\n    NumberInputField,\r\n    Button,\r\n    Flex,\r\n    Link,\r\n    ButtonGroup,\r\n    IconButton,\r\n    AddIcon,\r\n    useDisclosure,\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalCloseButton,\r\n    ModalBody,\r\n    Lorem,\r\n    ModalFooter,\r\n} from '@chakra-ui/react';\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction FormikExample() {\r\n    function validateName(value) {\r\n      let error\r\n      if (!value) {\r\n        error = \"Name is required\"\r\n      } else if (value.toLowerCase() !== \"naruto\") {\r\n        error = \"Jeez! You're not a fan ðŸ˜±\"\r\n      }\r\n      return error\r\n    }\r\n    return (\r\n      <Formik\r\n        initialValues={{ name: \"Sasuke\" }}\r\n        onSubmit={(values, actions) => {\r\n          setTimeout(() => {\r\n            alert(JSON.stringify(values, null, 2))\r\n            actions.setSubmitting(false)\r\n          }, 1000)\r\n        }}\r\n      >\r\n        {(props) => (\r\n          <Form>\r\n            <Field name=\"name\" validate={validateName}>\r\n              {({ field, form }) => (\r\n                <FormControl isInvalid={form.errors.name && form.touched.name}>\r\n                  <FormLabel htmlFor=\"name\">First name</FormLabel>\r\n                  <Input\r\n                    {...field}\r\n                    id=\"name\"\r\n                    placeholder=\"name\"\r\n                    borderRadius=\"16px\"\r\n                  />\r\n                  <FormErrorMessage>{form.errors.name}</FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Field>\r\n            <Button\r\n              mt={4}\r\n              colorScheme=\"brand\"\r\n              isLoading={props.isSubmitting}\r\n              type=\"submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    )\r\n  }"]},"metadata":{},"sourceType":"module"}