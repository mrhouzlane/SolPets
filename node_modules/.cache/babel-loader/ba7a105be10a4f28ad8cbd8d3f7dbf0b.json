{"ast":null,"code":"export function isElement(el) {\n  return el != null && typeof el == \"object\" && \"nodeType\" in el && el.nodeType === Node.ELEMENT_NODE;\n}\nexport function isHTMLElement(el) {\n  var _el$ownerDocument$def;\n  if (!isElement(el)) {\n    return false;\n  }\n  var win = (_el$ownerDocument$def = el.ownerDocument.defaultView) != null ? _el$ownerDocument$def : window;\n  return el instanceof win.HTMLElement;\n}\nexport function getOwnerWindow(node) {\n  var _getOwnerDocument$def, _getOwnerDocument;\n  return isElement(node) ? (_getOwnerDocument$def = (_getOwnerDocument = getOwnerDocument(node)) == null ? void 0 : _getOwnerDocument.defaultView) != null ? _getOwnerDocument$def : window : window;\n}\nexport function getOwnerDocument(node) {\n  var _node$ownerDocument;\n  return isElement(node) ? (_node$ownerDocument = node.ownerDocument) != null ? _node$ownerDocument : document : document;\n}\nexport function getEventWindow(event) {\n  var _view;\n  return (_view = event.view) != null ? _view : window;\n}\nexport function canUseDOM() {\n  return !!(typeof window !== \"undefined\" && window.document && window.document.createElement);\n}\nexport var isBrowser = canUseDOM();\nexport var dataAttr = function dataAttr(condition) {\n  return condition ? \"\" : undefined;\n};\nexport var ariaAttr = function ariaAttr(condition) {\n  return condition ? true : undefined;\n};\nexport var cx = function cx() {\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n  return classNames.filter(Boolean).join(\" \");\n};\nexport function getActiveElement(node) {\n  var doc = getOwnerDocument(node);\n  return doc == null ? void 0 : doc.activeElement;\n}\nexport function contains(parent, child) {\n  if (!parent) return false;\n  return parent === child || parent.contains(child);\n}\nexport function addDomEvent(target, eventName, handler, options) {\n  target.addEventListener(eventName, handler, options);\n  return function () {\n    target.removeEventListener(eventName, handler, options);\n  };\n}\n/**\n * Get the normalized event key across all browsers\n * @param event keyboard event\n */\n\nexport function normalizeEventKey(event) {\n  var key = event.key,\n    keyCode = event.keyCode;\n  var isArrowKey = keyCode >= 37 && keyCode <= 40 && key.indexOf(\"Arrow\") !== 0;\n  var eventKey = isArrowKey ? \"Arrow\" + key : key;\n  return eventKey;\n}\nexport function getRelatedTarget(event) {\n  var _event$target, _ref, _event$relatedTarget;\n  var target = (_event$target = event.target) != null ? _event$target : event.currentTarget;\n  var activeElement = getActiveElement(target);\n  var originalTarget = event.nativeEvent.explicitOriginalTarget;\n  return (_ref = (_event$relatedTarget = event.relatedTarget) != null ? _event$relatedTarget : originalTarget) != null ? _ref : activeElement;\n}\nexport function isRightClick(event) {\n  return event.button !== 0;\n}","map":null,"metadata":{},"sourceType":"module"}