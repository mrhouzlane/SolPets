{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Public\\\\Web3\\\\Github\\\\SolPets\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useControllableState, useDisclosure, useFocusOnHide, useId, useIds, useOutsideClick, useShortcut, useUnmountEffect, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { createContext, getValidChildren, mergeRefs } from \"@chakra-ui/react-utils\";\nimport { addItem, callAllHandlers, dataAttr, determineLazyBehavior, focus, getNextItemFromSearch, getOwnerDocument, isActiveElement, isArray, isHTMLElement, isString, normalizeEventKey, removeItem } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\nvar _createDescendantCont = createDescendantContext(),\n  _createDescendantCont2 = _slicedToArray(_createDescendantCont, 4),\n  MenuDescendantsProvider = _createDescendantCont2[0],\n  useMenuDescendantsContext = _createDescendantCont2[1],\n  useMenuDescendants = _createDescendantCont2[2],\n  useMenuDescendant = _createDescendantCont2[3];\n/* -------------------------------------------------------------------------------------------------\n * Create context to track menu state and logic\n * -----------------------------------------------------------------------------------------------*/\nexport { MenuDescendantsProvider, useMenuDescendantsContext, useMenuDescendants, useMenuDescendant };\nvar _createContext = createContext({\n    strict: false,\n    name: \"MenuContext\"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  MenuProvider = _createContext2[0],\n  useMenuContext = _createContext2[1];\n/* -------------------------------------------------------------------------------------------------\n * useMenu hook\n * -----------------------------------------------------------------------------------------------*/\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\nexport { MenuProvider, useMenuContext };\nexport function useMenu(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _props = props,\n    id = _props.id,\n    _props$closeOnSelect = _props.closeOnSelect,\n    closeOnSelect = _props$closeOnSelect === void 0 ? true : _props$closeOnSelect,\n    _props$closeOnBlur = _props.closeOnBlur,\n    closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur,\n    _props$autoSelect = _props.autoSelect,\n    autoSelect = _props$autoSelect === void 0 ? true : _props$autoSelect,\n    isLazy = _props.isLazy,\n    isOpenProp = _props.isOpen,\n    defaultIsOpen = _props.defaultIsOpen,\n    onCloseProp = _props.onClose,\n    onOpenProp = _props.onOpen,\n    _props$placement = _props.placement,\n    placement = _props$placement === void 0 ? \"bottom-start\" : _props$placement,\n    _props$lazyBehavior = _props.lazyBehavior,\n    lazyBehavior = _props$lazyBehavior === void 0 ? \"unmount\" : _props$lazyBehavior,\n    direction = _props.direction,\n    computePositionOnMount = _props.computePositionOnMount,\n    popperProps = _objectWithoutPropertiesLoose(props, [\"id\", \"closeOnSelect\", \"closeOnBlur\", \"autoSelect\", \"isLazy\", \"isOpen\", \"defaultIsOpen\", \"onClose\", \"onOpen\", \"placement\", \"lazyBehavior\", \"direction\", \"computePositionOnMount\"]);\n  var _useDisclosure = useDisclosure({\n      isOpen: isOpenProp,\n      defaultIsOpen: defaultIsOpen,\n      onClose: onCloseProp,\n      onOpen: onOpenProp\n    }),\n    isOpen = _useDisclosure.isOpen,\n    onOpen = _useDisclosure.onOpen,\n    onClose = _useDisclosure.onClose,\n    onToggle = _useDisclosure.onToggle;\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n  var menuRef = React.useRef(null);\n  var buttonRef = React.useRef(null);\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: function handler(event) {\n      var _buttonRef$current;\n      if (!((_buttonRef$current = buttonRef.current) != null && _buttonRef$current.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n\n  var popper = usePopper(_extends({}, popperProps, {\n    enabled: isOpen || computePositionOnMount,\n    placement: placement,\n    direction: direction\n  }));\n  var _React$useState = React.useState(-1),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    focusedIndex = _React$useState2[0],\n    setFocusedIndex = _React$useState2[1];\n  /**\n   * Context to register all menu item nodes\n   */\n  var descendants = useMenuDescendants();\n  /**\n   * Focus the button when we close the menu\n   */\n\n  useUpdateEffect(function () {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true\n  });\n  /**\n   * Generate unique ids for menu's list and button\n   */\n  var _useIds = useIds(id, \"menu-button\", \"menu-list\"),\n    _useIds2 = _slicedToArray(_useIds, 2),\n    buttonId = _useIds2[0],\n    menuId = _useIds2[1];\n  var openAndFocusMenu = React.useCallback(function () {\n    onOpen();\n    focus(menuRef.current, {\n      nextTick: true,\n      selectTextIfInput: false\n    });\n  }, [onOpen, menuRef]);\n  var timeoutIds = React.useRef(new Set([]));\n  useUnmountEffect(function () {\n    timeoutIds.current.forEach(function (id) {\n      return clearTimeout(id);\n    });\n    timeoutIds.current.clear();\n  });\n  var openAndFocusFirstItem = React.useCallback(function () {\n    onOpen();\n    var id = setTimeout(function () {\n      var first = descendants.firstEnabled();\n      if (first) setFocusedIndex(first.index);\n    });\n    timeoutIds.current.add(id);\n  }, [onOpen, setFocusedIndex, descendants]);\n  var openAndFocusLastItem = React.useCallback(function () {\n    onOpen();\n    var id = setTimeout(function () {\n      var last = descendants.lastEnabled();\n      if (last) setFocusedIndex(last.index);\n    });\n    timeoutIds.current.add(id);\n  }, [onOpen, setFocusedIndex, descendants]);\n  var refocus = React.useCallback(function () {\n    var _menuRef$current, _descendants$item;\n    var doc = getOwnerDocument(menuRef.current);\n    var hasFocusWithin = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(doc.activeElement);\n    var shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    var node = (_descendants$item = descendants.item(focusedIndex)) == null ? void 0 : _descendants$item.node;\n    if (node) {\n      focus(node, {\n        selectTextIfInput: false,\n        preventScroll: false\n      });\n    }\n  }, [isOpen, focusedIndex, descendants]);\n  React.useEffect(function () {\n    if (!isOpen) return;\n    if (autoSelect) openAndFocusFirstItem();else openAndFocusMenu();\n  }, [isOpen, autoSelect, openAndFocusFirstItem, openAndFocusMenu]);\n  return {\n    openAndFocusMenu: openAndFocusMenu,\n    openAndFocusFirstItem: openAndFocusFirstItem,\n    openAndFocusLastItem: openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    descendants: descendants,\n    popper: popper,\n    buttonId: buttonId,\n    menuId: menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen: isOpen,\n    onToggle: onToggle,\n    onOpen: onOpen,\n    onClose: onClose,\n    menuRef: menuRef,\n    buttonRef: buttonRef,\n    focusedIndex: focusedIndex,\n    closeOnSelect: closeOnSelect,\n    closeOnBlur: closeOnBlur,\n    autoSelect: autoSelect,\n    setFocusedIndex: setFocusedIndex,\n    isLazy: isLazy,\n    lazyBehavior: lazyBehavior\n  };\n}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuButton(props, externalRef) {\n  if (props === void 0) {\n    props = {};\n  }\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n  var menu = useMenuContext();\n  var onToggle = menu.onToggle,\n    popper = menu.popper,\n    openAndFocusFirstItem = menu.openAndFocusFirstItem,\n    openAndFocusLastItem = menu.openAndFocusLastItem;\n  var onKeyDown = React.useCallback(function (event) {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    var action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n  return _extends({}, props, {\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onToggle),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\nfunction isTargetMenuItem(target) {\n  var _target$getAttribute;\n\n  // this will catch `menuitem`, `menuitemradio`, `menuitemcheckbox`\n  return isHTMLElement(target) && !!((_target$getAttribute = target.getAttribute(\"role\")) != null && _target$getAttribute.startsWith(\"menuitem\"));\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuList\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuList(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n  if (ref === void 0) {\n    ref = null;\n  }\n  var menu = useMenuContext();\n  if (!menu) {\n    throw new Error(\"useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>\");\n  }\n  var focusedIndex = menu.focusedIndex,\n    setFocusedIndex = menu.setFocusedIndex,\n    menuRef = menu.menuRef,\n    isOpen = menu.isOpen,\n    onClose = menu.onClose,\n    menuId = menu.menuId,\n    isLazy = menu.isLazy,\n    lazyBehavior = menu.lazyBehavior;\n  var descendants = useMenuDescendantsContext();\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n\n  var createTypeaheadHandler = useShortcut({\n    preventDefault: function preventDefault(event) {\n      return event.key !== \" \" && isTargetMenuItem(event.target);\n    }\n  });\n  var onKeyDown = React.useCallback(function (event) {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Tab: function Tab(event) {\n        return event.preventDefault();\n      },\n      Escape: onClose,\n      ArrowDown: function ArrowDown() {\n        var next = descendants.nextEnabled(focusedIndex);\n        if (next) setFocusedIndex(next.index);\n      },\n      ArrowUp: function ArrowUp() {\n        var prev = descendants.prevEnabled(focusedIndex);\n        if (prev) setFocusedIndex(prev.index);\n      }\n    };\n    var fn = keyMap[eventKey];\n    if (fn) {\n      event.preventDefault();\n      fn(event);\n      return;\n    }\n    /**\n     * Typeahead: Based on current character pressed,\n     * find the next item to be selected\n     */\n\n    var onTypeahead = createTypeaheadHandler(function (character) {\n      var nextItem = getNextItemFromSearch(descendants.values(), character, function (item) {\n        var _item$node$textConten, _item$node;\n        return (_item$node$textConten = item == null ? void 0 : (_item$node = item.node) == null ? void 0 : _item$node.textContent) != null ? _item$node$textConten : \"\";\n      }, descendants.item(focusedIndex));\n      if (nextItem) {\n        var index = descendants.indexOf(nextItem.node);\n        setFocusedIndex(index);\n      }\n    });\n    if (isTargetMenuItem(event.target)) {\n      onTypeahead(event);\n    }\n  }, [descendants, focusedIndex, createTypeaheadHandler, onClose, setFocusedIndex]);\n  var hasBeenOpened = React.useRef(false);\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n  var shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy: isLazy,\n    lazyBehavior: lazyBehavior,\n    isSelected: isOpen\n  });\n  return _extends({}, props, {\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: _extends({}, props.style, {\n      transformOrigin: \"var(--popper-transform-origin)\"\n    }),\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuPosition: Composes usePopper to position the menu\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuPositioner(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _useMenuContext = useMenuContext(),\n    popper = _useMenuContext.popper,\n    isOpen = _useMenuContext.isOpen;\n  return popper.getPopperProps(_extends({}, props, {\n    style: _extends({\n      visibility: isOpen ? \"visible\" : \"hidden\"\n    }, props.style)\n  }));\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuItem: Hook for each menu item within the menu list.\n   We also use it in `useMenuItemOption`\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuItem(props, externalRef) {\n  if (props === void 0) {\n    props = {};\n  }\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n  var _props2 = props,\n    onMouseEnterProp = _props2.onMouseEnter,\n    onMouseMoveProp = _props2.onMouseMove,\n    onMouseLeaveProp = _props2.onMouseLeave,\n    onClickProp = _props2.onClick,\n    isDisabled = _props2.isDisabled,\n    isFocusable = _props2.isFocusable,\n    closeOnSelect = _props2.closeOnSelect,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onClick\", \"isDisabled\", \"isFocusable\", \"closeOnSelect\"]);\n  var menu = useMenuContext();\n  var setFocusedIndex = menu.setFocusedIndex,\n    focusedIndex = menu.focusedIndex,\n    menuCloseOnSelect = menu.closeOnSelect,\n    onClose = menu.onClose,\n    menuRef = menu.menuRef,\n    isOpen = menu.isOpen,\n    menuId = menu.menuId;\n  var ref = React.useRef(null);\n  var id = menuId + \"-menuitem-\" + useId();\n  /**\n   * Register the menuitem's node into the domContext\n   */\n  var _useMenuDescendant = useMenuDescendant({\n      disabled: isDisabled && !isFocusable\n    }),\n    index = _useMenuDescendant.index,\n    register = _useMenuDescendant.register;\n  var onMouseEnter = React.useCallback(function (event) {\n    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled, onMouseEnterProp]);\n  var onMouseMove = React.useCallback(function (event) {\n    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);\n    if (ref.current && !isActiveElement(ref.current)) {\n      onMouseEnter(event);\n    }\n  }, [onMouseEnter, onMouseMoveProp]);\n  var onMouseLeave = React.useCallback(function (event) {\n    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);\n  var onClick = React.useCallback(function (event) {\n    onClickProp == null ? void 0 : onClickProp(event);\n    if (!isTargetMenuItem(event.currentTarget)) return;\n    /**\n     * Close menu and parent menus, allowing the MenuItem\n     * to override its parent menu's `closeOnSelect` prop.\n     */\n\n    if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]);\n  var isFocused = index === focusedIndex;\n  var trulyDisabled = isDisabled && !isFocusable;\n  useUpdateEffect(function () {\n    if (!isOpen) return;\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current, {\n        nextTick: true,\n        selectTextIfInput: false,\n        preventScroll: false\n      });\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      focus(menuRef.current, {\n        preventScroll: false\n      });\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen]);\n  var clickableProps = useClickable({\n    onClick: onClick,\n    onMouseEnter: onMouseEnter,\n    onMouseMove: onMouseMove,\n    onMouseLeave: onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled: isDisabled,\n    isFocusable: isFocusable\n  });\n  return _extends({}, htmlProps, clickableProps, {\n    id: id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  });\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuOption: Composes useMenuItem to provide a selectable/checkable menu item\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuOption(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n  if (ref === void 0) {\n    ref = null;\n  }\n  var _props3 = props,\n    _props3$type = _props3.type,\n    type = _props3$type === void 0 ? \"radio\" : _props3$type,\n    isChecked = _props3.isChecked,\n    rest = _objectWithoutPropertiesLoose(props, [\"type\", \"isChecked\"]);\n  var ownProps = useMenuItem(rest, ref);\n  return _extends({}, ownProps, {\n    role: \"menuitem\" + type,\n    \"aria-checked\": isChecked\n  });\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuOptionGroup: Manages the state of multiple selectable menuitem or menu option\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuOptionGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _props4 = props,\n    children = _props4.children,\n    _props4$type = _props4.type,\n    type = _props4$type === void 0 ? \"radio\" : _props4$type,\n    valueProp = _props4.value,\n    defaultValue = _props4.defaultValue,\n    onChangeProp = _props4.onChange,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"children\", \"type\", \"value\", \"defaultValue\", \"onChange\"]);\n  var isRadio = type === \"radio\";\n  var fallback = isRadio ? \"\" : [];\n  var _useControllableState = useControllableState({\n      defaultValue: defaultValue != null ? defaultValue : fallback,\n      value: valueProp,\n      onChange: onChangeProp\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    value = _useControllableState2[0],\n    setValue = _useControllableState2[1];\n  var onChange = React.useCallback(function (selectedValue) {\n    if (type === \"radio\" && isString(value)) {\n      setValue(selectedValue);\n    }\n    if (type === \"checkbox\" && isArray(value)) {\n      var nextValue = value.includes(selectedValue) ? removeItem(value, selectedValue) : addItem(value, selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(function (child) {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if (child.type.id !== \"MenuItemOption\") return child;\n    var onClick = function onClick(event) {\n      onChange(child.props.value);\n      child.props.onClick == null ? void 0 : child.props.onClick(event);\n    };\n    var isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return /*#__PURE__*/React.cloneElement(child, {\n      type: type,\n      onClick: onClick,\n      isChecked: isChecked\n    });\n  });\n  return _extends({}, htmlProps, {\n    children: clones\n  });\n}\nexport function useMenuState() {\n  var _useMenuContext2 = useMenuContext(),\n    isOpen = _useMenuContext2.isOpen,\n    onClose = _useMenuContext2.onClose;\n  return {\n    isOpen: isOpen,\n    onClose: onClose\n  };\n}","map":null,"metadata":{},"sourceType":"module"}