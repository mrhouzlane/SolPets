{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Public\\\\Web3\\\\Github\\\\solana-boilerplate\\\\src\\\\components\\\\form.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport LoginForm from '../LoginForm';\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react';\nimport { ChakraProvider, Box, Flex, Text, VStack, Grid, Button, useToast, Code, HStack, Heading, theme as baseTheme, Input, SimpleGrid, Img, Container, Stack, extendTheme } from '@chakra-ui/react';\nimport { ConnectionProvider, WalletProvider, useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletModalProvider, WalletMultiButton, WalletDisconnectButton } from '@solana/wallet-adapter-react-ui';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useSolanaAccount() {\n  _s();\n\n  const [account, setAccount] = useState(null);\n  const [transactions, setTransactions] = useState(null);\n  const {\n    connection\n  } = useConnection();\n  const {\n    publicKey\n  } = useWallet();\n  const init = useCallback(async () => {\n    if (publicKey) {\n      let acc = await connection.getAccountInfo(publicKey);\n      setAccount(acc);\n      let transactions = await connection.getConfirmedSignaturesForAddress2(publicKey, {\n        limit: 10\n      });\n      setTransactions(transactions);\n    }\n  }, [publicKey, connection]);\n  useEffect(() => {\n    if (publicKey) {\n      setInterval(init, 1000);\n    }\n  }, [init, publicKey]);\n  return {\n    account,\n    transactions\n  };\n}\n\n_s(useSolanaAccount, \"r+B1Pwggmfntyo9rZAQ4cKQtsVo=\", false, function () {\n  return [useConnection, useWallet];\n});\n\nfunction form() {\n  _s2();\n\n  const {\n    connection\n  } = useConnection();\n  const {\n    publicKey\n  } = useWallet();\n  const {\n    account,\n    transactions\n  } = useSolanaAccount();\n  const toast = useToast();\n  const [airdropProcessing, setAirdropProcessing] = useState(false);\n  const getAirdrop = useCallback(async () => {\n    setAirdropProcessing(true);\n\n    try {\n      var airdropSignature = await connection.requestAirdrop(publicKey, web3.LAMPORTS_PER_SOL);\n      await connection.confirmTransaction(airdropSignature);\n    } catch (error) {\n      console.log(error);\n      toast({\n        title: 'Airdrop failed',\n        description: 'unknown error'\n      });\n    }\n\n    setAirdropProcessing(false);\n  }, [toast, publicKey, connection]);\n  return /*#__PURE__*/_jsxDEV(TabPanel, {\n    children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: 2,\n      spacing: 10,\n      children: [/*#__PURE__*/_jsxDEV(VStack, {\n        spacing: 8,\n        borderRadius: 10,\n        borderWidth: 2,\n        p: 10,\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          id: \"pubkey\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            children: \"Wallet Public Key\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            value: publicKey.toBase58(),\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"getting-started\",\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              as: \"button\",\n              bg: \"green\",\n              w: \"120px\",\n              h: \"150px\",\n              children: \"This is a button\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          id: \"balance\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            children: \"Balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            value: account ? account.lamports / web3.LAMPORTS_PER_SOL + ' SOL' : 'Loading..',\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: getAirdrop,\n          isLoading: airdropProcessing,\n          children: \"Get Airdrop of 1 SOL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(VStack, {\n        children: /*#__PURE__*/_jsxDEV(Greet, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 13\n  }, this);\n}\n\n_s2(form, \"rqJJcg2D9cDE0yFFe/aWjYKSaz0=\", false, function () {\n  return [useConnection, useWallet, useSolanaAccount, useToast];\n});","map":{"version":3,"sources":["C:/Users/Public/Web3/Github/solana-boilerplate/src/components/form.js"],"names":["React","useCallback","useEffect","useState","useMemo","LoginForm","Tabs","TabList","TabPanels","Tab","TabPanel","ChakraProvider","Box","Flex","Text","VStack","Grid","Button","useToast","Code","HStack","Heading","theme","baseTheme","Input","SimpleGrid","Img","Container","Stack","extendTheme","ConnectionProvider","WalletProvider","useConnection","useWallet","WalletModalProvider","WalletMultiButton","WalletDisconnectButton","useSolanaAccount","account","setAccount","transactions","setTransactions","connection","publicKey","init","acc","getAccountInfo","getConfirmedSignaturesForAddress2","limit","setInterval","form","toast","airdropProcessing","setAirdropProcessing","getAirdrop","airdropSignature","requestAirdrop","web3","LAMPORTS_PER_SOL","confirmTransaction","error","console","log","title","description","toBase58","lamports"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState, useMemo } from 'react';\r\nimport LoginForm from '../LoginForm';\r\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react';\r\nimport { \r\n    ChakraProvider,\r\n    Box,\r\n    Flex,\r\n    Text,\r\n    VStack,\r\n    Grid,\r\n    Button,\r\n    useToast,\r\n    Code,\r\n    HStack,\r\n    Heading,\r\n    theme as baseTheme,\r\n    Input,\r\n    SimpleGrid,\r\n    Img,\r\n    Container,\r\n    Stack,\r\n    extendTheme,\r\n   } from '@chakra-ui/react';\r\n   import {\r\n    ConnectionProvider,\r\n    WalletProvider,\r\n    useConnection,\r\n    useWallet,\r\n  } from '@solana/wallet-adapter-react';\r\n  import {\r\n    WalletModalProvider,\r\n    WalletMultiButton,\r\n    WalletDisconnectButton,\r\n  } from '@solana/wallet-adapter-react-ui';\r\n\r\n\r\n\r\n  \r\n  function useSolanaAccount() {\r\n    const [account, setAccount] = useState(null);\r\n    const [transactions, setTransactions] = useState(null);\r\n    const { connection } = useConnection();\r\n    const { publicKey } = useWallet();\r\n  \r\n    const init = useCallback(async () => {\r\n      if (publicKey) {\r\n        let acc = await connection.getAccountInfo(publicKey);\r\n        setAccount(acc);\r\n        let transactions = await connection.getConfirmedSignaturesForAddress2(\r\n          publicKey,\r\n          {\r\n            limit: 10,\r\n          }\r\n        );\r\n        setTransactions(transactions);\r\n      }\r\n    }, [publicKey, connection]);\r\n  \r\n    useEffect(() => {\r\n      if (publicKey) {\r\n        setInterval(init, 1000);\r\n      }\r\n    }, [init, publicKey]);\r\n  \r\n    return { account, transactions };\r\n  }\r\n\r\n\r\n\r\n\r\nfunction form() {\r\n    const { connection } = useConnection();\r\n    const { publicKey } = useWallet();\r\n    const { account, transactions } = useSolanaAccount();\r\n    const toast = useToast();\r\n    const [airdropProcessing, setAirdropProcessing] = useState(false);\r\n  \r\n    const getAirdrop = useCallback(async () => {\r\n      setAirdropProcessing(true);\r\n      try {\r\n        var airdropSignature = await connection.requestAirdrop(\r\n          publicKey,\r\n          web3.LAMPORTS_PER_SOL\r\n        );\r\n        await connection.confirmTransaction(airdropSignature);\r\n      } catch (error) {\r\n        console.log(error);\r\n        toast({ title: 'Airdrop failed', description: 'unknown error' });\r\n      }\r\n      setAirdropProcessing(false);\r\n    }, [toast, publicKey, connection]);\r\n\r\n\r\n    return (\r\n        \r\n            <TabPanel>\r\n                \r\n                <SimpleGrid columns={2} spacing={10}>\r\n                <VStack spacing={8} borderRadius={10} borderWidth={2} p={10}>\r\n                    <FormControl id=\"pubkey\">\r\n                    <FormLabel>Wallet Public Key</FormLabel>\r\n                    <Input\r\n                        type=\"text\"\r\n                        value={publicKey.toBase58()}\r\n                        readOnly\r\n                    />\r\n                    <div className='getting-started'>\r\n                        <Box as=\"button\" bg=\"green\" w=\"120px\" h=\"150px\">This is a button</Box>\r\n                    </div>\r\n                    </FormControl>\r\n                    <FormControl id=\"balance\">\r\n                    <FormLabel>Balance</FormLabel>\r\n                    <Input\r\n                        type=\"text\"\r\n                        value={\r\n                        account\r\n                            ? account.lamports / web3.LAMPORTS_PER_SOL + ' SOL'\r\n                            : 'Loading..'\r\n                        }\r\n                        readOnly\r\n                    />\r\n                    </FormControl>\r\n                    <Button onClick={getAirdrop} isLoading={airdropProcessing}>\r\n                    Get Airdrop of 1 SOL\r\n                    </Button>\r\n                </VStack>\r\n                <VStack>\r\n                    <Greet />\r\n                </VStack>\r\n                </SimpleGrid>\r\n             \r\n            </TabPanel>\r\n       \r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}