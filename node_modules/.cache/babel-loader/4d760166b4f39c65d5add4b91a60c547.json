{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Public\\\\Web3\\\\Github\\\\solana-boilerplate\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport { ChakraProvider, Box, Flex, Text, VStack, Grid, Button, useToast, Code, HStack, Heading, theme as baseTheme, Input, SimpleGrid, Img, Container, Stack, extendTheme } from '@chakra-ui/react';\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react';\nimport { FormControl, FormLabel } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport * as web3 from '@solana/web3.js';\nimport { ConnectionProvider, WalletProvider, useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { getPhantomWallet, getSolflareWallet, getSolletWallet, getSolletExtensionWallet, getLedgerWallet } from '@solana/wallet-adapter-wallets';\nimport { WalletModalProvider, WalletMultiButton, WalletDisconnectButton } from '@solana/wallet-adapter-react-ui';\nimport { Greet } from './Greet';\nimport logo from \"./logo.svg\";\nimport phoneUI from \"./assets/phoneUI.svg\";\nimport solanaShape from './assets/solanaShape.png';\nimport dog from \"./assets/dogAndHuman.svg\";\nimport solanaVerticalLogo from \"./assets/solanaVerticalLogo.svg\";\nimport dogProfile from \"./assets/dogProfile.svg\";\nimport solanaShapeBottom from \"./assets/solanaShapeBottom.svg\";\nimport LoginForm from './LoginForm';\nimport Header from './components/home';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nfunction WalletNotConnected() {\n  return /*#__PURE__*/_jsxDEV(VStack, {\n    height: \"70vh\",\n    justify: \"space-around\",\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"2xl\",\n        children: [' ', \"Looks like your wallet is not connnected. Connect a wallet to get started!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WalletMultiButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_c = WalletNotConnected;\n\nfunction useSolanaAccount() {\n  _s();\n\n  const [account, setAccount] = useState(null);\n  const [transactions, setTransactions] = useState(null);\n  const {\n    connection\n  } = useConnection();\n  const {\n    publicKey\n  } = useWallet();\n  const init = useCallback(async () => {\n    if (publicKey) {\n      let acc = await connection.getAccountInfo(publicKey);\n      setAccount(acc);\n      let transactions = await connection.getConfirmedSignaturesForAddress2(publicKey, {\n        limit: 10\n      });\n      setTransactions(transactions);\n    }\n  }, [publicKey, connection]);\n  useEffect(() => {\n    if (publicKey) {\n      setInterval(init, 1000);\n    }\n  }, [init, publicKey]);\n  return {\n    account,\n    transactions\n  };\n}\n\n_s(useSolanaAccount, \"r+B1Pwggmfntyo9rZAQ4cKQtsVo=\", false, function () {\n  return [useConnection, useWallet];\n});\n\nfunction App() {\n  _s2();\n\n  const network = 'devnet';\n  const endpoint = web3.clusterApiUrl(network);\n  const wallets = useMemo(() => [getPhantomWallet(), getSolflareWallet(), getSolletWallet({\n    network\n  }), getSolletExtensionWallet({\n    network\n  }), getLedgerWallet()], [network]);\n  const theme = extendTheme({\n    fonts: {\n      heading: 'Montserrat',\n      Body: 'Inter'\n    },\n    colors: {\n      brand: {\n        100: \"linear-gradient(144deg, #242038 20%, #522DA9 80%, #432C87)\",\n        // ...\n        900: \"#1a202c\"\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ChakraProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n        endpoint: endpoint,\n        children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n          wallets: wallets,\n          autoConnect: true,\n          children: /*#__PURE__*/_jsxDEV(WalletModalProvider, {\n            children: /*#__PURE__*/_jsxDEV(Home, {\n              children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s2(App, \"W9IgGN+f7P4ScyFu7AdMyjvnXHI=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"WalletNotConnected\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/Public/Web3/Github/solana-boilerplate/src/App.js"],"names":["React","useCallback","useEffect","useState","useMemo","ChakraProvider","Box","Flex","Text","VStack","Grid","Button","useToast","Code","HStack","Heading","theme","baseTheme","Input","SimpleGrid","Img","Container","Stack","extendTheme","Tabs","TabList","TabPanels","Tab","TabPanel","FormControl","FormLabel","ColorModeSwitcher","web3","ConnectionProvider","WalletProvider","useConnection","useWallet","getPhantomWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","getLedgerWallet","WalletModalProvider","WalletMultiButton","WalletDisconnectButton","Greet","solanaShape","LoginForm","Header","require","WalletNotConnected","useSolanaAccount","account","setAccount","transactions","setTransactions","connection","publicKey","init","acc","getAccountInfo","getConfirmedSignaturesForAddress2","limit","setInterval","App","network","endpoint","clusterApiUrl","wallets","fonts","heading","Body","colors","brand"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState, useMemo } from 'react';\r\nimport {\r\n  ChakraProvider,\r\n  Box,\r\n  Flex,\r\n  Text,\r\n  VStack,\r\n  Grid,\r\n  Button,\r\n  useToast,\r\n  Code,\r\n  HStack,\r\n  Heading,\r\n  theme as baseTheme,\r\n  Input,\r\n  SimpleGrid,\r\n  Img,\r\n  Container,\r\n  Stack,\r\n  extendTheme,\r\n} from '@chakra-ui/react';\r\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react';\r\nimport { FormControl, FormLabel } from '@chakra-ui/react';\r\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\r\n\r\nimport * as web3 from '@solana/web3.js';\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n  useConnection,\r\n  useWallet,\r\n} from '@solana/wallet-adapter-react';\r\nimport {\r\n  getPhantomWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n  getLedgerWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\nimport {\r\n  WalletModalProvider,\r\n  WalletMultiButton,\r\n  WalletDisconnectButton,\r\n} from '@solana/wallet-adapter-react-ui';\r\nimport { Greet } from './Greet';\r\nimport logo from './logo.svg';\r\nimport phoneUI from './assets/phoneUI.svg';\r\nimport solanaShape from './assets/solanaShape.png'\r\nimport dog from './assets/dogAndHuman.svg'\r\nimport solanaVerticalLogo from './assets/solanaVerticalLogo.svg';\r\nimport dogProfile from './assets/dogProfile.svg'\r\nimport solanaShapeBottom from './assets/solanaShapeBottom.svg'\r\nimport LoginForm from './LoginForm';\r\nimport Header from './components/home';\r\n\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nfunction WalletNotConnected() {\r\n  return (\r\n    <VStack height=\"70vh\" justify=\"space-around\">\r\n      <VStack>\r\n        <Text fontSize=\"2xl\">\r\n          {' '}\r\n          Looks like your wallet is not connnected. Connect a wallet to get\r\n          started!\r\n        </Text>\r\n        <WalletMultiButton />\r\n      </VStack>\r\n    </VStack>\r\n  );\r\n}\r\n\r\nfunction useSolanaAccount() {\r\n  const [account, setAccount] = useState(null);\r\n  const [transactions, setTransactions] = useState(null);\r\n  const { connection } = useConnection();\r\n  const { publicKey } = useWallet();\r\n\r\n  const init = useCallback(async () => {\r\n    if (publicKey) {\r\n      let acc = await connection.getAccountInfo(publicKey);\r\n      setAccount(acc);\r\n      let transactions = await connection.getConfirmedSignaturesForAddress2(\r\n        publicKey,\r\n        {\r\n          limit: 10,\r\n        }\r\n      );\r\n      setTransactions(transactions);\r\n    }\r\n  }, [publicKey, connection]);\r\n\r\n  useEffect(() => {\r\n    if (publicKey) {\r\n      setInterval(init, 1000);\r\n    }\r\n  }, [init, publicKey]);\r\n\r\n  return { account, transactions };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const network = 'devnet';\r\n  const endpoint = web3.clusterApiUrl(network);\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n      getLedgerWallet(),\r\n    ],\r\n    [network]\r\n  );\r\n  \r\n  const theme = extendTheme({\r\n    fonts: {\r\n      heading:'Montserrat',\r\n      Body: 'Inter',\r\n    },\r\n    colors: {\r\n      brand: {\r\n        100: \"linear-gradient(144deg, #242038 20%, #522DA9 80%, #432C87)\",\r\n        // ...\r\n        900: \"#1a202c\",\r\n      },\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n    <ChakraProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletModalProvider>\r\n            <Home><Header /></Home>\r\n          </WalletModalProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ChakraProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}