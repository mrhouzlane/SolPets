{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Public\\\\Web3\\\\Github\\\\solana-boilerplate\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport { ChakraProvider, Box, Text, VStack, Grid, Button, useToast, Code, HStack, Heading, theme, Input, SimpleGrid, Img } from '@chakra-ui/react';\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react';\nimport { FormControl, FormLabel } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport * as web3 from '@solana/web3.js';\nimport { ConnectionProvider, WalletProvider, useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { getPhantomWallet, getSolflareWallet, getSolletWallet, getSolletExtensionWallet, getLedgerWallet } from '@solana/wallet-adapter-wallets';\nimport { WalletModalProvider, WalletMultiButton, WalletDisconnectButton } from '@solana/wallet-adapter-react-ui';\nimport { Greet } from './Greet';\nimport logo from \"./logo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nfunction WalletNotConnected() {\n  return /*#__PURE__*/_jsxDEV(VStack, {\n    height: \"70vh\",\n    justify: \"space-around\",\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"2xl\",\n        children: [' ', \"Looks like your wallet is not connnected. Connect a wallet to get started!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WalletMultiButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_c = WalletNotConnected;\n\nfunction useSolanaAccount() {\n  _s();\n\n  const [account, setAccount] = useState(null);\n  const [transactions, setTransactions] = useState(null);\n  const {\n    connection\n  } = useConnection();\n  const {\n    publicKey\n  } = useWallet();\n  const init = useCallback(async () => {\n    if (publicKey) {\n      let acc = await connection.getAccountInfo(publicKey);\n      setAccount(acc);\n      let transactions = await connection.getConfirmedSignaturesForAddress2(publicKey, {\n        limit: 10\n      });\n      setTransactions(transactions);\n    }\n  }, [publicKey, connection]);\n  useEffect(() => {\n    if (publicKey) {\n      setInterval(init, 1000);\n    }\n  }, [init, publicKey]);\n  return {\n    account,\n    transactions\n  };\n}\n\n_s(useSolanaAccount, \"r+B1Pwggmfntyo9rZAQ4cKQtsVo=\", false, function () {\n  return [useConnection, useWallet];\n});\n\nfunction Home() {\n  _s2();\n\n  const {\n    connection\n  } = useConnection();\n  const {\n    publicKey\n  } = useWallet();\n  const {\n    account,\n    transactions\n  } = useSolanaAccount();\n  const toast = useToast();\n  const [airdropProcessing, setAirdropProcessing] = useState(false);\n  const getAirdrop = useCallback(async () => {\n    setAirdropProcessing(true);\n\n    try {\n      var airdropSignature = await connection.requestAirdrop(publicKey, web3.LAMPORTS_PER_SOL);\n      await connection.confirmTransaction(airdropSignature);\n    } catch (error) {\n      console.log(error);\n      toast({\n        title: 'Airdrop failed',\n        description: 'unknown error'\n      });\n    }\n\n    setAirdropProcessing(false);\n  }, [toast, publicKey, connection]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    textAlign: \"center\",\n    fontSize: \"xl\",\n    background: \"linear-gradient(144deg, #242038 20%, #522DA9 80%, #432C87)\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      minH: \"100vh\",\n      p: 3,\n      children: /*#__PURE__*/_jsxDEV(Tabs, {\n        variant: \"soft-rounded\",\n        colorScheme: \"green\",\n        children: [/*#__PURE__*/_jsxDEV(TabList, {\n          width: \"full\",\n          children: /*#__PURE__*/_jsxDEV(HStack, {\n            justify: \"space-between\",\n            width: \"full\",\n            children: [/*#__PURE__*/_jsxDEV(HStack, {\n              children: [/*#__PURE__*/_jsxDEV(Img, {\n                src: logo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tab, {\n                children: \"Home\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tab, {\n                children: \"Transaction History\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(HStack, {\n              children: [/*#__PURE__*/_jsxDEV(WalletMultiButton, {\n                bg: \"red\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 17\n              }, this), publicKey && /*#__PURE__*/_jsxDEV(WalletDisconnectButton, {\n                bg: \"pink\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 31\n              }, this), /*#__PURE__*/_jsxDEV(ColorModeSwitcher, {\n                justifySelf: \"flex-end\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TabPanels, {\n          children: [/*#__PURE__*/_jsxDEV(TabPanel, {\n            children: publicKey && /*#__PURE__*/_jsxDEV(SimpleGrid, {\n              columns: 2,\n              spacing: 10,\n              children: [/*#__PURE__*/_jsxDEV(VStack, {\n                spacing: 8,\n                borderRadius: 10,\n                borderWidth: 2,\n                p: 10,\n                children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                  id: \"pubkey\",\n                  children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                    children: \"Wallet Public Key\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 135,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Input, {\n                    type: \"text\",\n                    value: publicKey.toBase58(),\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 136,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                  id: \"balance\",\n                  children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                    children: \"Balance\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 143,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Input, {\n                    type: \"text\",\n                    value: account ? account.lamports / web3.LAMPORTS_PER_SOL + ' SOL' : 'Loading..',\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 144,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: getAirdrop,\n                  isLoading: airdropProcessing,\n                  children: \"Get Airdrop of 1 SOL\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(VStack, {\n                children: /*#__PURE__*/_jsxDEV(Greet, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n            children: [publicKey && /*#__PURE__*/_jsxDEV(VStack, {\n              spacing: 8,\n              children: [/*#__PURE__*/_jsxDEV(Heading, {\n                children: \"Transaction History\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 19\n              }, this), transactions && /*#__PURE__*/_jsxDEV(VStack, {\n                children: transactions.map((v, i, arr) => /*#__PURE__*/_jsxDEV(HStack, {\n                  children: [/*#__PURE__*/_jsxDEV(Text, {\n                    children: \"Signature: \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 172,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Code, {\n                    children: v.signature\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 173,\n                    columnNumber: 27\n                  }, this)]\n                }, 'transaction-' + i, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this), !publicKey && /*#__PURE__*/_jsxDEV(WalletNotConnected, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Home, \"rqJJcg2D9cDE0yFFe/aWjYKSaz0=\", false, function () {\n  return [useConnection, useWallet, useSolanaAccount, useToast];\n});\n\n_c2 = Home;\n\nfunction App() {\n  _s3();\n\n  const network = 'devnet';\n  const endpoint = web3.clusterApiUrl(network);\n  const wallets = useMemo(() => [getPhantomWallet(), getSolflareWallet(), getSolletWallet({\n    network\n  }), getSolletExtensionWallet({\n    network\n  }), getLedgerWallet], [network]);\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n      endpoint: endpoint,\n      children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n        wallets: wallets,\n        autoConnect: true,\n        children: /*#__PURE__*/_jsxDEV(WalletModalProvider, {\n          children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(App, \"W9IgGN+f7P4ScyFu7AdMyjvnXHI=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"WalletNotConnected\");\n$RefreshReg$(_c2, \"Home\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["C:/Users/Public/Web3/Github/solana-boilerplate/src/App.js"],"names":["React","useCallback","useEffect","useState","useMemo","ChakraProvider","Box","Text","VStack","Grid","Button","useToast","Code","HStack","Heading","theme","Input","SimpleGrid","Img","Tabs","TabList","TabPanels","Tab","TabPanel","FormControl","FormLabel","ColorModeSwitcher","web3","ConnectionProvider","WalletProvider","useConnection","useWallet","getPhantomWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","getLedgerWallet","WalletModalProvider","WalletMultiButton","WalletDisconnectButton","Greet","require","WalletNotConnected","useSolanaAccount","account","setAccount","transactions","setTransactions","connection","publicKey","init","acc","getAccountInfo","getConfirmedSignaturesForAddress2","limit","setInterval","Home","toast","airdropProcessing","setAirdropProcessing","getAirdrop","airdropSignature","requestAirdrop","LAMPORTS_PER_SOL","confirmTransaction","error","console","log","title","description","logo","toBase58","lamports","map","v","i","arr","signature","App","network","endpoint","clusterApiUrl","wallets"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState, useMemo } from 'react';\r\nimport {\r\n  ChakraProvider,\r\n  Box,\r\n  Text,\r\n  VStack,\r\n  Grid,\r\n  Button,\r\n  useToast,\r\n  Code,\r\n  HStack,\r\n  Heading,\r\n  theme,\r\n  Input,\r\n  SimpleGrid,\r\n  Img,\r\n} from '@chakra-ui/react';\r\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react';\r\nimport { FormControl, FormLabel } from '@chakra-ui/react';\r\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\r\n\r\nimport * as web3 from '@solana/web3.js';\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n  useConnection,\r\n  useWallet,\r\n} from '@solana/wallet-adapter-react';\r\nimport {\r\n  getPhantomWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n  getLedgerWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\nimport {\r\n  WalletModalProvider,\r\n  WalletMultiButton,\r\n  WalletDisconnectButton,\r\n} from '@solana/wallet-adapter-react-ui';\r\nimport { Greet } from './Greet';\r\nimport logo from './logo.svg';\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nfunction WalletNotConnected() {\r\n  return (\r\n    <VStack height=\"70vh\" justify=\"space-around\">\r\n      <VStack>\r\n        <Text fontSize=\"2xl\">\r\n          {' '}\r\n          Looks like your wallet is not connnected. Connect a wallet to get\r\n          started!\r\n        </Text>\r\n        <WalletMultiButton />\r\n      </VStack>\r\n    </VStack>\r\n  );\r\n}\r\n\r\nfunction useSolanaAccount() {\r\n  const [account, setAccount] = useState(null);\r\n  const [transactions, setTransactions] = useState(null);\r\n  const { connection } = useConnection();\r\n  const { publicKey } = useWallet();\r\n\r\n  const init = useCallback(async () => {\r\n    if (publicKey) {\r\n      let acc = await connection.getAccountInfo(publicKey);\r\n      setAccount(acc);\r\n      let transactions = await connection.getConfirmedSignaturesForAddress2(\r\n        publicKey,\r\n        {\r\n          limit: 10,\r\n        }\r\n      );\r\n      setTransactions(transactions);\r\n    }\r\n  }, [publicKey, connection]);\r\n\r\n  useEffect(() => {\r\n    if (publicKey) {\r\n      setInterval(init, 1000);\r\n    }\r\n  }, [init, publicKey]);\r\n\r\n  return { account, transactions };\r\n}\r\n\r\nfunction Home() {\r\n  const { connection } = useConnection();\r\n  const { publicKey } = useWallet();\r\n  const { account, transactions } = useSolanaAccount();\r\n  const toast = useToast();\r\n  const [airdropProcessing, setAirdropProcessing] = useState(false);\r\n\r\n  const getAirdrop = useCallback(async () => {\r\n    setAirdropProcessing(true);\r\n    try {\r\n      var airdropSignature = await connection.requestAirdrop(\r\n        publicKey,\r\n        web3.LAMPORTS_PER_SOL\r\n      );\r\n      await connection.confirmTransaction(airdropSignature);\r\n    } catch (error) {\r\n      console.log(error);\r\n      toast({ title: 'Airdrop failed', description: 'unknown error' });\r\n    }\r\n    setAirdropProcessing(false);\r\n  }, [toast, publicKey, connection]);\r\n\r\n  return (\r\n    <Box textAlign=\"center\" fontSize=\"xl\" background='linear-gradient(144deg, #242038 20%, #522DA9 80%, #432C87)'>\r\n      <Grid minH=\"100vh\" p={3}>\r\n        <Tabs variant=\"soft-rounded\" colorScheme=\"green\">\r\n          <TabList width=\"full\">\r\n            <HStack justify=\"space-between\" width=\"full\">\r\n              <HStack>\r\n                <Img src={logo} />\r\n                <Tab>Home</Tab>\r\n                <Tab>Transaction History</Tab>\r\n              </HStack>\r\n              <HStack>\r\n                <WalletMultiButton bg=\"red\" />\r\n                {publicKey && <WalletDisconnectButton bg=\"pink\" />}\r\n                <ColorModeSwitcher justifySelf=\"flex-end\" />\r\n              </HStack>\r\n            </HStack>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              {publicKey && (\r\n                <SimpleGrid columns={2} spacing={10}>\r\n                  <VStack spacing={8} borderRadius={10} borderWidth={2} p={10}>\r\n                    <FormControl id=\"pubkey\">\r\n                      <FormLabel>Wallet Public Key</FormLabel>\r\n                      <Input\r\n                        type=\"text\"\r\n                        value={publicKey.toBase58()}\r\n                        readOnly\r\n                      />\r\n                    </FormControl>\r\n                    <FormControl id=\"balance\">\r\n                      <FormLabel>Balance</FormLabel>\r\n                      <Input\r\n                        type=\"text\"\r\n                        value={\r\n                          account\r\n                            ? account.lamports / web3.LAMPORTS_PER_SOL + ' SOL'\r\n                            : 'Loading..'\r\n                        }\r\n                        readOnly\r\n                      />\r\n                    </FormControl>\r\n                    <Button onClick={getAirdrop} isLoading={airdropProcessing}>\r\n                      Get Airdrop of 1 SOL\r\n                    </Button>\r\n                  </VStack>\r\n                  <VStack>\r\n                    <Greet />\r\n                  </VStack>\r\n                </SimpleGrid>\r\n              )}\r\n            </TabPanel>\r\n            <TabPanel>\r\n              {publicKey && (\r\n                <VStack spacing={8}>\r\n                  <Heading>Transaction History</Heading>\r\n                  {transactions && (\r\n                    <VStack>\r\n                      {transactions.map((v, i, arr) => (\r\n                        <HStack key={'transaction-' + i}>\r\n                          <Text>Signature: </Text>\r\n                          <Code>{v.signature}</Code>\r\n                        </HStack>\r\n                      ))}\r\n                    </VStack>\r\n                  )}\r\n                </VStack>\r\n              )}\r\n              {!publicKey && <WalletNotConnected />}\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const network = 'devnet';\r\n  const endpoint = web3.clusterApiUrl(network);\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n      getLedgerWallet\r\n    ],\r\n    [network]\r\n  );\r\n\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletModalProvider>\r\n            <Home></Home>\r\n          </WalletModalProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}