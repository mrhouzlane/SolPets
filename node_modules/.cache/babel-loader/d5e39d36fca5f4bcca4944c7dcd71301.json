{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { TransitionDefaults, withDelay } from \"./transition-utils\";\nvar variants = {\n  exit: function exit(_ref) {\n    var _transition$exit;\n    var reverse = _ref.reverse,\n      initialScale = _ref.initialScale,\n      transition = _ref.transition,\n      transitionEnd = _ref.transitionEnd,\n      delay = _ref.delay;\n    return _extends({\n      opacity: 0\n    }, reverse ? {\n      scale: initialScale,\n      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit\n    } : {\n      transitionEnd: _extends({\n        scale: initialScale\n      }, transitionEnd == null ? void 0 : transitionEnd.exit)\n    }, {\n      transition: (_transition$exit = transition == null ? void 0 : transition.exit) != null ? _transition$exit : withDelay.exit(TransitionDefaults.exit, delay)\n    });\n  },\n  enter: function enter(_ref2) {\n    var _transition$enter;\n    var transitionEnd = _ref2.transitionEnd,\n      transition = _ref2.transition,\n      delay = _ref2.delay;\n    return {\n      opacity: 1,\n      scale: 1,\n      transition: (_transition$enter = transition == null ? void 0 : transition.enter) != null ? _transition$enter : withDelay.enter(TransitionDefaults.enter, delay),\n      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter\n    };\n  }\n};\nexport var scaleFadeConfig = {\n  initial: \"exit\",\n  animate: \"enter\",\n  exit: \"exit\",\n  variants: variants\n};\nexport var ScaleFade = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var unmountOnExit = props.unmountOnExit,\n    isOpen = props.in,\n    _props$reverse = props.reverse,\n    reverse = _props$reverse === void 0 ? true : _props$reverse,\n    _props$initialScale = props.initialScale,\n    initialScale = _props$initialScale === void 0 ? 0.95 : _props$initialScale,\n    className = props.className,\n    transition = props.transition,\n    transitionEnd = props.transitionEnd,\n    delay = props.delay,\n    rest = _objectWithoutPropertiesLoose(props, [\"unmountOnExit\", \"in\", \"reverse\", \"initialScale\", \"className\", \"transition\", \"transitionEnd\", \"delay\"]);\n  var show = unmountOnExit ? isOpen && unmountOnExit : true;\n  var animate = isOpen || unmountOnExit ? \"enter\" : \"exit\";\n  var custom = {\n    initialScale: initialScale,\n    reverse: reverse,\n    transition: transition,\n    transitionEnd: transitionEnd,\n    delay: delay\n  };\n  return /*#__PURE__*/React.createElement(AnimatePresence, {\n    custom: custom\n  }, show && /*#__PURE__*/React.createElement(motion.div, _extends({\n    ref: ref,\n    className: cx(\"chakra-offset-slide\", className)\n  }, scaleFadeConfig, {\n    animate: animate,\n    custom: custom\n  }, rest)));\n});\nif (__DEV__) {\n  ScaleFade.displayName = \"ScaleFade\";\n}","map":null,"metadata":{},"sourceType":"module"}